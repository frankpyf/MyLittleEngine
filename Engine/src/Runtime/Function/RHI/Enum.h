#pragma once
#include "Runtime/Utils/BitmaskEnum.h"

#define USE_VULKAN

// most of them are originated from Vulkan, Other APIs should acommodate to vulkan rules
enum DescriptorType {
    DESCRIPTOR_TYPE_SAMPLER = 0,
    DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
    DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
    DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
    DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
    DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
    DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
    DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
    DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
    DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
#ifdef USE_VULKAN
    DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10
#endif
};

enum class MemoryUsage : uint8_t
{
    MEMORY_USAGE_UNKNOWN = 0,
    MEMORY_USAGE_GPU_ONLY = 1,
    MEMORY_USAGE_CPU_ONLY = 2,
    // Updates in host and reads on device
    MEMORY_USAGE_CPU_TO_GPU = 3,
    // Updates in device and reads back on host
    MEMORY_USAGE_GPU_TO_CPU = 4,
#ifdef USE_VULKAN
    MEMORY_USAGE_GPU_LAZILY_ALLOCATED = 6,
    MEMORY_USAGE_AUTO = 7,
#endif
};

enum class ResourceTypes : uint32_t
{
    RESOURCE_TYPE_NONE = 0,
    RESOURCE_TYPE_SAMPLER = 0x00000001,
    RESOURCE_TYPE_RENDER_TARGET = 0x00000002,

    RESOURCE_TYPE_SAMPLED_IMAGE = 0x00000004,
    RESOURCE_TYPE_STORAGE_IMAGE = 0x00000008,
    RESOURCE_TYPE_BUFFER = 0x00000010,
    RESOURCE_TYPE_STAGING_BUFFER = 0,
    RESOURCE_TYPE_UNIFORM_BUFFER = 0x00000020,
    RESOURCE_TYPE_STORAGE_BUFFER = 0x00000030,
    RESOURCE_TYPE_VERTEX_BUFFER = 0x00000040,
    RESOURCE_TYPE_INDEX_BUFFER = 0x00000050,
    RESOURCE_TYPE_UNIFORM_BUFFER_DYNAMIC = 0x00000060,
    RESOURCE_TYPE_STORAGE_BUFFER_DYNAMIC = 0x00000070,
#ifdef USE_VULKAN
    RESOURCE_TYPE_COMBINED_IMAGE_SAMPLER = 0x00000080,
    RESOURCE_TYPE_INPUT_ATTACHMENT = 0x00000100
#endif
};
ENUM_CLASS_FLAGS(ResourceTypes)

enum ShaderStage {
    SHADER_STAGE_NONE = 0,

    SHADER_STAGE_VERTEX_BIT = 0x00000001,
    SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002,
    SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004,
    SHADER_STAGE_GEOMETRY_BIT = 0x00000008,
    SHADER_STAGE_FRAGMENT_BIT = 0x00000010,
    SHADER_STAGE_COMPUTE_BIT = 0x00000020,
    SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,
    SHADER_STAGE_ALL = 0x7FFFFFFF
};

enum class FenceStatus
{
	READY,
	NOT_READY
};

enum class PrimitiveTopology : uint8_t
{
    PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
    PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
    PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
    PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
    PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
    PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
};

